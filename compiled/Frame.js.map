{"version":3,"sources":["../src/Frame.js"],"names":[],"mappings":"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","file":"Frame.js","sourcesContent":["import Byte from './Byte';\r\nimport Utils from './Utils';\r\n\r\nlet unmarshallSingle = (data) =>\r\n{\r\n    let divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\r\n    let headerLines = data.substring(0, divider).split(Byte.LF);\r\n    let command = headerLines.shift();\r\n    let headers = {};\r\n\r\n    for(let line of headerLines.reverse())\r\n    {\r\n        let idx = line.indexOf(':');\r\n        headers[Utils.trim(line.substring(0, idx))] = Utils.trim(line.substring(idx + 1));\r\n    }\r\n\r\n    let body = '';\r\n\r\n    let start = divider + 2;\r\n\r\n    if(headers['content-length'])\r\n    {\r\n        let len = parseInt(headers['content-length']);\r\n        body = ('' + data).substring(start, start + len);\r\n    }\r\n    else\r\n    {\r\n        let chr = null;\r\n\r\n        for(let i = start; i <= data.length; i++)\r\n        {\r\n            chr = data.charAt(i);\r\n            if(chr === Byte.NULL)\r\n            {\r\n                break;\r\n            }\r\n\r\n            body += chr;\r\n        }\r\n    }\r\n\r\n    return new Frame(command, headers, body);\r\n};\r\n\r\nclass Frame\r\n{\r\n    static sizeOfUTF8(s)\r\n    {\r\n        if(s)\r\n        {\r\n            return encodeURI(s).split(/%..|./).length - 1;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static unmarshall(datas)\r\n    {\r\n        let frames = [];\r\n\r\n        for(let data of datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`)))\r\n        {\r\n            if(data.length > 0)\r\n            {\r\n                frames.push(unmarshallSingle(data));\r\n            }\r\n        }\r\n\r\n        return frames;\r\n    }\r\n\r\n    static marshall(command, headers, body)\r\n    {\r\n        let frame = new Frame(command, headers, body);\r\n\r\n        return frame.toString() + Byte.NULL;\r\n    }\r\n\r\n    constructor(command, headers = {}, body = '')\r\n    {\r\n        this.command = command;\r\n        this.headers = headers;\r\n        this.body = body;\r\n    }\r\n\r\n    toString()\r\n    {\r\n        let lines = [this.command];\r\n\r\n        let skipContentLength = this.headers['content-length'] === false ? true : false;\r\n\r\n        if(skipContentLength)\r\n        {\r\n            delete this.headers['content-length'];\r\n        }\r\n\r\n        for(let key of Object.keys(this.headers))\r\n        {\r\n            let value = this.headers[key];\r\n            lines.push(`${key}:${value}`);\r\n        }\r\n\r\n        if(this.body && !skipContentLength)\r\n        {\r\n            lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\r\n        }\r\n\r\n        lines.push(Byte.LF + this.body);\r\n\r\n        return lines.join(Byte.LF);\r\n    }\r\n}\r\n\r\nexport default Frame;\r\n"]}