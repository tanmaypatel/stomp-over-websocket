{"version":3,"sources":["../src/Client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAQM,M;AAEF,wBAAY,GAAZ,EACA;AAAA,gBADiB,cACjB,yDADkC,SAClC;AAAA,gBAD6C,OAC7C,yDADuD,EACvD;AAAA,gBAD2D,SAC3D,yDADuE,CAAC,WAAD,EAAc,WAAd,CACvE;;AAAA;;;AAEI,iBAAK,EAAL,GAAU,IAAI,cAAJ,CAAmB,GAAnB,CAAV;AACA,iBAAK,EAAL,CAAQ,UAAR,GAAqB,aAArB;;AAEA,iBAAK,SAAL,GAAiB,KAAjB;AACA,iBAAK,SAAL,GAAiB;AACb,0BAAU,KADG;AAEb,0BAAU;AAFG,aAAjB;AAIA,iBAAK,qBAAL,GAA6B,KAAK,IAAlC;AACA,iBAAK,aAAL,GAAqB,EAArB;AACA,iBAAK,WAAL,GAAmB,EAAnB;;;AAGA,qCAAO,IAAP;AACH;;;;kCAEK,O,EACN;AACI,wBAAQ,GAAR,CAAY,OAAZ;AACH;;;sCAES,O,EAAS,O,EAAS,I,EAC5B;AACI,oBAAI,MAAM,gBAAM,QAAN,CAAe,OAAf,EAAwB,OAAxB,EAAiC,IAAjC,CAAV;;AAEA,oBAAG,OAAO,KAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,yBAAK,KAAL,UAAkB,GAAlB;AACH;;AAED,uBAAM,IAAN,EACA;AACI,wBAAG,IAAI,MAAJ,GAAa,KAAK,qBAArB,EACA;AACI,6BAAK,EAAL,CAAQ,IAAR,CAAa,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAK,qBAAtB,CAAb;;AAEA,8BAAM,IAAI,SAAJ,CAAc,KAAK,qBAAnB,CAAN;;AAEA,4BAAG,OAAO,KAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,iCAAK,KAAL,kBAA0B,IAAI,MAA9B;AACH;AACJ,qBAVD,MAYA;AACI,+BAAO,KAAK,EAAL,CAAQ,IAAR,CAAa,GAAb,CAAP;AACH;AACJ;AACJ;;;4CAEe,O,EAChB;AAAA;;AACI,oBAAG,CAAC,mBAAS,IAAV,EAAgB,mBAAS,IAAzB,EAA+B,OAA/B,CAAuC,QAAQ,OAA/C,KAA2D,CAA9D,EACA;AACI;AACH;;AAED,oBAAI,uBAAJ;oBAAoB,uBAApB;;AANJ,2CAOuC,QAAQ,YAAR,EAAsB,KAAtB,CAA4B,GAA5B,EAAiC,GAAjC,CAAqC,UAAC,CAAD,EACxE;AACI,2BAAO,SAAS,CAAT,CAAP;AACH,iBAHkC,CAPvC;;AAAA;;AAOK,8BAPL;AAOqB,8BAPrB;;;AAYI,oBAAI,YAAJ;AACA,oBAAG,KAAK,SAAL,CAAe,QAAf,IAA2B,CAA3B,IAAgC,kBAAkB,CAArD,EACA;AACI,0BAAM,KAAK,GAAL,CAAS,KAAK,SAAL,CAAe,QAAxB,EAAkC,cAAlC,CAAN;;AAEA,wBAAG,OAAO,KAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,6BAAK,KAAL,sBAA8B,GAA9B;AACH;;AAED,yBAAK,MAAL,GAAc,gBAAM,WAAN,CAAkB,GAAlB,EAAuB,YACrC;AACI,8BAAK,EAAL,CAAQ,IAAR,CAAa,eAAK,EAAlB;;AAEA,4BAAG,OAAO,MAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,kCAAK,KAAL;AACH;AACJ,qBARa,CAAd;AASH;;AAED,oBAAG,KAAK,SAAL,CAAe,QAAf,IAA2B,CAA3B,IAAgC,kBAAkB,CAArD,EACA;AACI,0BAAM,KAAK,GAAL,CAAS,KAAK,SAAL,CAAe,QAAxB,EAAkC,cAAlC,CAAN;;AAEA,wBAAG,OAAO,KAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,6BAAK,KAAL,uBAA+B,GAA/B;AACH;;AAED,yBAAK,MAAL,GAAc,gBAAM,WAAN,CAAkB,GAAlB,EAAuB,YACrC;AACI,4BAAI,QAAQ,gBAAM,GAAN,KAAc,MAAK,cAA/B;;AAEA,4BAAG,QAAQ,MAAM,CAAjB,EACA;AACI,gCAAG,OAAO,MAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,sCAAK,KAAL,mDAA2D,KAA3D;AACH;;AAED,kCAAK,EAAL,CAAQ,KAAR;AACH;AACJ,qBAba,CAAd;AAcH;AACJ;;;oCAEO,O,EACR;AAAA;;AACI,oBAAG,OAAO,KAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,yBAAK,KAAL;AACH;;AAED,qBAAK,EAAL,CAAQ,MAAR,GAAiB,UAAC,GAAD,EACjB;AACI,wBAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACC,+BAAK,KAAL;AACA;;AAED,4BAAQ,gBAAR,IAA4B,mBAAS,iBAAT,EAA5B;AACA,4BAAQ,YAAR,IAAwB,CAAC,OAAK,SAAL,CAAe,QAAhB,EAA0B,OAAK,SAAL,CAAe,QAAzC,EAAmD,IAAnD,CAAwD,GAAxD,CAAxB;;AAEA,2BAAK,SAAL,CAAe,mBAAS,OAAxB,EAAiC,OAAjC;AACH,iBAXD;;AAaA,qBAAK,EAAL,CAAQ,SAAR,GAAoB,UAAC,GAAD,EACpB;AACI,wBAAI,aAAJ;wBAAU,YAAV;;AAEA,wBAAG,OAAO,WAAP,IAAuB,WAAvB,IAAsC,IAAI,IAAJ,YAAoB,WAA7D,EACA;AACI,4BAAI,OAAM,IAAI,UAAJ,CAAe,IAAI,IAAnB,CAAV;;AAEA,4BAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,mCAAK,KAAL,2BAAmC,KAAI,MAAvC;AACH;;AAED,4BAAI,WAAU,EAAd;;AARJ;AAAA;AAAA;;AAAA;AAUI,iDAAa,IAAb,8HACA;AAAA,oCADQ,CACR;;AACI,yCAAQ,IAAR,CAAa,OAAO,YAAP,CAAoB,CAApB,CAAb;AACH;AAbL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeI,+BAAO,SAAQ,IAAR,CAAa,EAAb,CAAP;AACH,qBAjBD,MAmBA;AACI,+BAAO,IAAI,IAAX;AACH;;AAED,2BAAK,cAAL,GAAsB,gBAAM,GAAN,EAAtB;;AAEA,wBAAG,QAAQ,eAAK,EAAhB,EACA;AACI,4BAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,mCAAK,KAAL;AACH;;AAED;AACH;;AAED,wBAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,+BAAK,KAAL,UAAkB,IAAlB;AACH;;AAED,wBAAI,UAAU,EAAd;AA3CJ;AAAA;AAAA;;AAAA;AA4CI,8CAAiB,gBAAM,UAAN,CAAiB,IAAjB,CAAjB,mIACA;AAAA,gCADQ,KACR;;AACI,mCAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB;;AAEA,oCAAO,MAAM,OAAb;AAEI,qCAAK,mBAAS,SAAd;AACI,wCAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,+CAAK,KAAL,0BAAkC,MAAM,OAAN,CAAc,MAAhD;AACH;;AAED,2CAAK,SAAL,GAAiB,IAAjB;AACA,2CAAK,eAAL,CAAqB,MAAM,OAA3B;;AAEA,2CAAK,IAAL,CAAU,YAAV,EAAwB,KAAxB;;AAEA;;AAEJ,qCAAK,mBAAS,OAAd;AACI,wCAAI,eAAe,MAAM,OAAN,CAAc,YAAjC;;AAEA,wCAAI,YAAY,OAAK,aAAL,CAAmB,YAAnB,KAAoC,OAAK,SAAzD;;AAEA,2CAAK,IAAL,CAAU,SAAV,EAAqB,KAArB;;AAEA,wCAAG,SAAH,EACA;AAAA;AACI,gDAAI,eAAJ;AACA,gDAAI,YAAY,MAAM,OAAN,CAAc,YAAd,CAAhB;;AAEA,kDAAM,GAAN,GAAY,YACZ;AAAA,oDADa,OACb,yDADuB,EACvB;;AACI,uDAAO,OAAO,GAAP,CAAW,SAAX,EAAsB,YAAtB,EAAoC,OAApC,CAAP;AACH,6CAHD;;AAKA,kDAAM,IAAN,GAAa,YACb;AAAA,oDADc,OACd,yDADwB,EACxB;;AACI,uDAAO,OAAO,IAAP,CAAY,SAAZ,EAAuB,YAAvB,EAAqC,OAArC,CAAP;AACH,6CAHD;;AAKA,sDAAU,KAAV;AAdJ;AAeC,qCAhBD,MAkBA;AACI,4CAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,mDAAK,KAAL,kCAA0C,KAA1C;AACH;AACJ;AACD;;AAEJ,qCAAK,mBAAS,OAAd;;AAEI,2CAAK,IAAL,CAAU,SAAV,EAAqB,KAArB;;AAEA;;AAEJ,qCAAK,mBAAS,KAAd;;AAEI,2CAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB;;AAEA;;AAEJ;;AAEI,wCAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,+CAAK,KAAL,uBAA+B,KAA/B;AACH;AAjET;AAmEH;AAnHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoHC,iBArHD;;AAuHA,qBAAK,EAAL,CAAQ,OAAR,GAAkB,UAAC,GAAD,EAClB;AACI,wBAAI,oBAAoB,CAAC,IAAI,QAAL,IAAiB,CAAC,OAAK,SAAvB,GAAmC,IAAnC,GAA0C,KAAlE;;AAEA,wBAAI,sCAAoC,OAAK,EAAL,CAAQ,GAAhD;;AAEA,wBAAG,OAAO,OAAK,KAAZ,KAAsB,UAAzB,EACA;AACI,+BAAK,KAAL,CAAW,GAAX;AACH;;AAED,2BAAK,QAAL;;AAEA,wBAAG,iBAAH,EACA;AACI,+BAAK,IAAL,CAAU,mBAAV,EAA+B;AAC3B,kCAAM,IAAI,IADiB;AAE3B,oCAAQ,IAAI;AAFe,yBAA/B;AAIH,qBAND,MAQA;AACI,+BAAK,IAAL,CAAU,kBAAV,EAA8B;AAC1B,kCAAM,IAAI,IADgB;AAE1B,oCAAQ,IAAI;AAFc,yBAA9B;AAIH;AACJ,iBA3BD;AA4BH;;;yCAGD;AACI,qBAAK,SAAL,CAAe,mBAAS,UAAxB;;AAEA,oBAAI,SAAS,IAAb;;AAEA,qBAAK,EAAL,CAAQ,OAAR,GAAkB,UAAS,GAAT,EAClB;AACI,2BAAO,IAAP,CAAY,YAAZ;AACH,iBAHD;;AAKA,qBAAK,EAAL,CAAQ,KAAR;AACA,qBAAK,QAAL;AACH;;;uCAGD;AACI,qBAAK,SAAL,GAAiB,KAAjB;;AAEA,oBAAG,KAAK,MAAR,EACA;AACI,oCAAM,eAAN,CAAsB,KAAK,MAA3B;AACH;;AAED,oBAAG,KAAK,MAAR,EACA;AACI,oCAAM,eAAN,CAAsB,KAAK,MAA3B;AACH;AACJ;;;iCAEI,W,EACL;AAAA,oBADkB,OAClB,yDAD4B,EAC5B;AAAA,oBADgC,IAChC,yDADuC,EACvC;;AACI,wBAAQ,WAAR,GAAsB,WAAtB;AACA,uBAAO,KAAK,SAAL,CAAe,mBAAS,IAAxB,EAA8B,OAA9B,EAAuC,IAAvC,CAAP;AACH;;;sCAES,W,EAAa,Q,EACvB;AAAA,oBADiC,OACjC,yDAD2C,EAC3C;;AACI,oBAAG,CAAC,QAAQ,EAAZ,EACA;AACI,4BAAQ,EAAR,GAAa,kBAAkB,gBAAM,YAAN,EAA/B;AACH;;AAED,wBAAQ,WAAR,GAAsB,WAAtB;;AAEA,qBAAK,aAAL,CAAmB,QAAQ,EAA3B,IAAiC,QAAjC;;AAEA,qBAAK,SAAL,CAAe,mBAAS,SAAxB,EAAmC,OAAnC;;AAEA,oBAAI,SAAS,IAAb;;AAEA,uBAAO;AACH,wBAAI,QAAQ,EADT;AAEH,iCAAa,uBACb;AACI,+BAAO,OAAO,WAAP,CAAmB,QAAQ,EAA3B,CAAP;AACH;AALE,iBAAP;AAOH;;;wCAEW,E,EACZ;AACI,uBAAO,KAAK,aAAL,CAAmB,EAAnB,CAAP;;AAEA,qBAAK,SAAL,CAAe,mBAAS,WAAxB,EAAqC;AACjC,wBAAI;AAD6B,iBAArC;AAGH;;;kCAEK,W,EACN;AACI,oBAAI,OAAO,eAAe,QAAQ,gBAAM,YAAN,EAAlC;;AAEA,qBAAK,SAAL,CAAe,mBAAS,KAAxB,EAA+B;AAC3B,iCAAa;AADc,iBAA/B;;AAIA,oBAAI,SAAS,IAAb;;AAEA,uBAAO;AACH,wBAAI,IADD;AAEH,4BAAQ,kBACR;AACI,+BAAO,OAAO,MAAP,CAAc,IAAd,CAAP;AACH,qBALE;AAMH,2BAAO,iBACP;AACI,+BAAO,OAAO,KAAP,CAAa,IAAb,CAAP;AACH;AATE,iBAAP;AAWH;;;mCAEM,W,EACP;AACI,uBAAO,KAAK,SAAL,CAAe,mBAAS,MAAxB,EAAgC;AACnC,iCAAa;AADsB,iBAAhC,CAAP;AAGH;;;kCAEK,W,EACN;AACI,uBAAO,KAAK,SAAL,CAAe,mBAAS,KAAxB,EAA+B;AAClC,iCAAa;AADqB,iBAA/B,CAAP;AAGH;;;gCAEG,S,EAAW,Y,EACf;AAAA,oBAD6B,OAC7B,yDADuC,EACvC;;AACI,wBAAQ,YAAR,IAAwB,SAAxB;AACA,wBAAQ,YAAR,GAAuB,YAAvB;AACA,uBAAO,KAAK,SAAL,CAAe,mBAAS,GAAxB,EAA6B,OAA7B,CAAP;AACH;;;iCAEI,S,EAAW,Y,EAChB;AAAA,oBAD8B,OAC9B,yDADwC,EACxC;;AACI,wBAAQ,YAAR,IAAwB,SAAxB;AACA,wBAAQ,YAAR,GAAuB,YAAvB;AACA,uBAAO,KAAK,SAAL,CAAe,mBAAS,IAAxB,EAA8B,OAA9B,CAAP;AACH;;;;;;sBAGU,M","file":"Client.js","sourcesContent":["import Events from 'minivents';\r\n\r\nimport Byte from './Byte';\r\nimport Frame from './Frame';\r\nimport Versions from './Versions';\r\nimport Commands from './Commands';\r\nimport Utils from './Utils';\r\n\r\nclass Client\r\n{\r\n    constructor(url, WebSocketClass = WebSocket, options = {}, protocols = ['v10.stomp', 'v11.stomp'])\r\n    {\r\n        // this.ws = new WebSocketClass(url, protocols, options);\r\n        this.ws = new WebSocketClass(url);\r\n        this.ws.binaryType = 'arraybuffer';\r\n\r\n        this.connected = false;\r\n        this.heartbeat = {\r\n            outgoing: 10000,\r\n            incoming: 10000\r\n        };\r\n        this.maxWebSocketFrameSize = 16 * 1024;\r\n        this.subscriptions = {};\r\n        this.partialData = '';\r\n\r\n        // applying events mixins to support event handlers\r\n        Events(this);\r\n    }\r\n\r\n    debug(message)\r\n    {\r\n        console.log(message);\r\n    }\r\n\r\n    _transmit(command, headers, body)\r\n    {\r\n        let out = Frame.marshall(command, headers, body);\r\n\r\n        if(typeof this.debug === 'function')\r\n        {\r\n            this.debug(`>>> ${out}`);\r\n        }\r\n\r\n        while(true)\r\n        {\r\n            if(out.length > this.maxWebSocketFrameSize)\r\n            {\r\n                this.ws.send(out.substring(0, this.maxWebSocketFrameSize));\r\n\r\n                out = out.substring(this.maxWebSocketFrameSize);\r\n\r\n                if(typeof this.debug === 'function')\r\n                {\r\n                    this.debug(`remaining = ${out.length}`);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return this.ws.send(out);\r\n            }\r\n        }\r\n    }\r\n\r\n    _setupHeartBeat(headers)\r\n    {\r\n        if([Versions.V1_1, Versions.V1_2].indexOf(headers.version) >= 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let serverOutgoing, serverIncoming;\r\n        [serverOutgoing, serverIncoming] = headers['heart-beat'].split(',').map((v) =>\r\n        {\r\n            return parseInt(v);\r\n        });\r\n\r\n        let ttl;\r\n        if(this.heartbeat.outgoing == 0 || serverIncoming == 0)\r\n        {\r\n            ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\r\n\r\n            if(typeof this.debug === 'function')\r\n            {\r\n                this.debug(`send PING every ${ttl}ms`);\r\n            }\r\n\r\n            this.pinger = Utils.repeatEvery(ttl, () =>\r\n            {\r\n                this.ws.send(Byte.LF);\r\n\r\n                if(typeof this.debug === 'function')\r\n                {\r\n                    this.debug(`>>> PING`);\r\n                }\r\n            });\r\n        }\r\n\r\n        if(this.heartbeat.incoming == 0 || serverOutgoing == 0)\r\n        {\r\n            ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\r\n\r\n            if(typeof this.debug === 'function')\r\n            {\r\n                this.debug(`check PONG every ${ttl}ms`);\r\n            }\r\n\r\n            this.ponger = Utils.repeatEvery(ttl, () =>\r\n            {\r\n                let delta = Utils.now() - this.serverActivity;\r\n\r\n                if(delta > ttl * 2)\r\n                {\r\n                    if(typeof this.debug === 'function')\r\n                    {\r\n                        this.debug(`did not receive server activity for the last ${delta}ms`);\r\n                    }\r\n\r\n                    this.ws.close();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    connect(headers)\r\n    {\r\n        if(typeof this.debug === 'function')\r\n        {\r\n            this.debug(`Opening Web Socket...`);\r\n        }\r\n\r\n        this.ws.onopen = (evt) =>\r\n        {\r\n            if(typeof this.debug === 'function')\r\n            {\r\n             this.debug(`Web Socket Opened...`);\r\n            }\r\n\r\n            headers['accept-version'] = Versions.supportedVersions();\r\n            headers['heart-beat'] = [this.heartbeat.outgoing, this.heartbeat.incoming].join(',');\r\n\r\n            this._transmit(Commands.CONNECT, headers);\r\n        };\r\n\r\n        this.ws.onmessage = (evt) =>\r\n        {\r\n            let data, arr;\r\n\r\n            if(typeof(ArrayBuffer) != 'undefined' && evt.data instanceof ArrayBuffer)\r\n            {\r\n                let arr = new Uint8Array(evt.data) ;\r\n\r\n                if(typeof this.debug === 'function')\r\n                {\r\n                    this.debug(`--- got data length: ${arr.length}`);\r\n                }\r\n\r\n                let results = [];\r\n\r\n                for(let c of arr)\r\n                {\r\n                    results.push(String.fromCharCode(c));\r\n                }\r\n\r\n                data = results.join('');\r\n            }\r\n            else\r\n            {\r\n                data = evt.data;\r\n            }\r\n\r\n            this.serverActivity = Utils.now();\r\n\r\n            if(data == Byte.LF)\r\n            {\r\n                if(typeof this.debug === 'function')\r\n                {\r\n                    this.debug(`<<< PONG`);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            if(typeof this.debug === 'function')\r\n            {\r\n                this.debug(`<<< ${data}`);\r\n            }\r\n\r\n            let results = [];\r\n            for(let frame of Frame.unmarshall(data))\r\n            {\r\n                this.emit('frame', frame);\r\n\r\n                switch(frame.command)\r\n                {\r\n                    case Commands.CONNECTED:\r\n                        if(typeof this.debug === 'function')\r\n                        {\r\n                            this.debug(`connected to server ${frame.headers.server}`);\r\n                        }\r\n\r\n                        this.connected = true;\r\n                        this._setupHeartBeat(frame.headers);\r\n\r\n                        this.emit('connection', frame);\r\n\r\n                        break;\r\n\r\n                    case Commands.MESSAGE:\r\n                        let subscription = frame.headers.subscription;\r\n\r\n                        let onreceive = this.subscriptions[subscription] || this.onreceive;\r\n\r\n                        this.emit('message', frame);\r\n\r\n                        if(onreceive)\r\n                        {\r\n                            let client = this;\r\n                            let messageID = frame.headers['message-id'];\r\n\r\n                            frame.ack = (headers = {}) =>\r\n                            {\r\n                                return client.ack(messageID, subscription, headers);\r\n                            };\r\n\r\n                            frame.nack = (headers = {}) =>\r\n                            {\r\n                                return client.nack(messageID, subscription, headers);\r\n                            };\r\n\r\n                            onreceive(frame);\r\n                        }\r\n                        else\r\n                        {\r\n                            if(typeof this.debug === 'function')\r\n                            {\r\n                                this.debug(`Unhandled received MESSAGE: ${frame}`);\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case Commands.RECEIPT:\r\n\r\n                        this.emit('receipt', frame);\r\n\r\n                        break;\r\n\r\n                    case Commands.ERROR:\r\n\r\n                        this.emit('error', frame);\r\n\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if(typeof this.debug === 'function')\r\n                        {\r\n                            this.debug(`Unhandled frame: ${frame}`);\r\n                        }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.ws.onclose = (evt) =>\r\n        {\r\n            let didConnectionFail = !evt.wasClean || !this.connected ? true : false;\r\n\r\n            let msg = `Whoops! Lost connection to ${this.ws.url}`;\r\n\r\n            if(typeof this.debug === 'function')\r\n            {\r\n                this.debug(msg);\r\n            }\r\n\r\n            this._cleanUp();\r\n\r\n            if(didConnectionFail)\r\n            {\r\n                this.emit('connection_failed', {\r\n                    code: evt.code,\r\n                    reason: evt.reason\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.emit('connection_error', {\r\n                    code: evt.code,\r\n                    reason: evt.reason\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    disconnect()\r\n    {\r\n        this._transmit(Commands.DISCONNECT);\r\n\r\n        let client = this;\r\n\r\n        this.ws.onclose = function(evt)\r\n        {\r\n            client.emit('disconnect');\r\n        };\r\n\r\n        this.ws.close();\r\n        this._cleanUp();\r\n    }\r\n\r\n    _cleanUp()\r\n    {\r\n        this.connected = false;\r\n\r\n        if(this.pinger)\r\n        {\r\n            Utils.stopRepeatation(this.pinger);\r\n        }\r\n\r\n        if(this.ponger)\r\n        {\r\n            Utils.stopRepeatation(this.ponger);\r\n        }\r\n    }\r\n\r\n    send(destination, headers = {}, body = '')\r\n    {\r\n        headers.destination = destination;\r\n        return this._transmit(Commands.SEND, headers, body);\r\n    }\r\n\r\n    subscribe(destination, callback, headers = {})\r\n    {\r\n        if(!headers.id)\r\n        {\r\n            headers.id = 'subscription-' + Utils.generateUUID();\r\n        }\r\n\r\n        headers.destination = destination;\r\n\r\n        this.subscriptions[headers.id] = callback;\r\n\r\n        this._transmit(Commands.SUBSCRIBE, headers);\r\n\r\n        let client = this;\r\n\r\n        return {\r\n            id: headers.id,\r\n            unsubscribe: function()\r\n            {\r\n                return client.unsubscribe(headers.id);\r\n            }\r\n        };\r\n    }\r\n\r\n    unsubscribe(id)\r\n    {\r\n        delete this.subscriptions[id];\r\n\r\n        this._transmit(Commands.UNSUBSCRIBE, {\r\n            id: id\r\n        });\r\n    }\r\n\r\n    begin(transaction)\r\n    {\r\n        let txid = transaction || 'tx-' + Utils.generateUUID();\r\n\r\n        this._transmit(Commands.BEGIN, {\r\n            transaction: txid\r\n        });\r\n\r\n        let client = this;\r\n\r\n        return {\r\n            id: txid,\r\n            commit: function()\r\n            {\r\n                return client.commit(txid);\r\n            },\r\n            abort: function()\r\n            {\r\n                return client.abort(txid);\r\n            }\r\n        };\r\n    }\r\n\r\n    commit(transaction)\r\n    {\r\n        return this._transmit(Commands.COMMIT, {\r\n            transaction: transaction\r\n        });\r\n    }\r\n\r\n    abort(transaction)\r\n    {\r\n        return this._transmit(Commands.ABORT, {\r\n            transaction: transaction\r\n        });\r\n    }\r\n\r\n    ack(messageID, subscription, headers = {})\r\n    {\r\n        headers['message-id'] = messageID;\r\n        headers.subscription = subscription;\r\n        return this._transmit(Commands.ACK, headers);\r\n    }\r\n\r\n    nack(messageID, subscription, headers = {})\r\n    {\r\n        headers['message-id'] = messageID;\r\n        headers.subscription = subscription;\r\n        return this._transmit(Commands.NACK, headers);\r\n    }\r\n}\r\n\r\nexport default Client;\r\n"]}